[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.round_resets.blind_states.Small = 'Defeated''''
position = 'after'
payload = '''elseif (bonuser == true) then
    bonus_reward(G.GAME.blind.config.bonus)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then'''
position = 'at'
payload = '''if (bonuser ~= true) and (G.GAME.round_resets.blind == G.P_BLINDS.bl_small) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_hand_to_discard()'''
position = 'before'
payload = '''local bonuser = false
if G.GAME.blind:get_type() == 'Bonus' then
    bonuser = true
    bonus_end_of_round(G.GAME.blind.config.bonus)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''elseif self.name == "Big Blind" then'''
position = 'before'
payload = '''elseif self.config.bonus then
    return 'Bonus'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:load(blindTable)'
position = 'after'
payload = '''self.config.bonus = blindTable.bonusy

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'return blindTable'
position = 'before'
payload = '''blindTable.bonusy = self.config.bonus
    '''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:set_blind(blind, reset, silent)'
position = 'after'
payload = '''   if not reset then
        self.config.bonus = nil
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if G.FORCE_BOSS then return G.FORCE_BOSS end'
position = 'after'
payload = '''if G.GAME.forced_blinds and G.GAME.forced_blinds[G.GAME.round_resets.ante] then
    local blind = G.GAME.forced_blinds[G.GAME.round_resets.ante]
    G.GAME.forced_blinds[G.GAME.round_resets.ante] = nil
    return blind
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:press_play()'''
position = 'after'
payload = '''   if G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.spectrals then
        G.E_MANAGER:add_event(Event({ func = function()
            local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'nature')
            card:set_edition({negative = true}, true)
            card:add_to_deck()
            G.consumeables:emplace(card)
        return true end })) 
        delay(0.6)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''_card:juice_up()'''
position = 'at'
payload = '''if (not self.config.bonus) or (not self.config.bonus.flip_jokers) then _card:juice_up() end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''return self.ability.mult'''
position = 'at'
payload = '''return self.ability.mult + (self.ability.perma_bonus_mult or 0)'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Enhanced' then'''
position = 'before'
payload = '''if specific_vars and specific_vars.bonus_mult then
    localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif _c.set == 'Booster' then'''
position = 'before'
payload = '''if specific_vars and specific_vars.bonus_mult then
    localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,'''
position = 'after'
payload = '''bonus_mult = ((self.ability.perma_bonus_mult or 0) > 0) and self.ability.perma_bonus_mult or nil,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == "Small Blind" then'''
position = 'at'
payload = '''if (self.name == "Small Blind") and not (self.config.bonus) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:drawn_to_hand()'''
position = 'after'
payload = '''   if G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.disco then disco_jokers() end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''G.GAME.last_blind.name = self.name'''
position = 'after'
payload = '''G.GAME.last_blind.key = blind and blind.key or G.GAME.last_blind.key'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if not _type or _type == v.kind then it = it + (v.weight or 1) end'''
position = 'at'
payload = '''if not _type or _type == v.kind then it = it + ((((G.GAME.selected_back.name == "Ante Deck") and (v.group_key == 'k_blind_pack') and (v.weight*5)) or v.weight) or 1) end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if it >= poll and it - (v.weight or 1) <= poll then center = v; break end'''
position = 'at'
payload = '''if it >= poll and it - ((((G.GAME.selected_back.name == "Ante Deck") and (v.group_key == 'k_blind_pack') and (v.weight*5)) or v.weight) or 1) <= poll then center = v; break end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if (not _type or _type == v.kind) and not G.GAME.banned_keys[v.key] then cume = cume + (v.weight or 1 ) end'''
position = 'at'
payload = '''if (not _type or _type == v.kind) and not G.GAME.banned_keys[v.key] then cume = cume + ((((G.GAME.selected_back.name == "Ante Deck") and (v.group_key == 'k_blind_pack') and (v.weight*5)) or v.weight) or 1 ) end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local ret = 0'''
position = 'after'
payload = '''if G.GAME.blind and G.GAME.blind.config and G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.dollars_score then
    ret = ret + G.GAME.blind.config.bonus.dollars_score
end'''
match_indent = true
